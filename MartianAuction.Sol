pragma solidity ^0.5.0;

contract MartianAuction {
    
    // Current state of the auction 
    address payable public beneficiary;
    address public highestBidder; // address of highest bidder
    uint public highestBid; // current highest bid amount
    
    // Track pending returns for those that were outbid
    // Allow withdrawals of previous bids
    mapping(address => uint) pendingReturns;
    
    // Set to true at the end, disallows any change.
    // By default initialized to 'false'
    bool public ended;
    
    // Events that will log data for our frontend dApp
    // Events will be emitted on changes.
    event HighestBidIncreased(address bidder, uint amount);
    event AuctionEnded(address winner, uint amount);
    
    // Upon deployment of the contract, a beneficiary 
    // of the auction must be set
    /// Create a simple auction with `_biddingTime`
    /// seconds bidding time on behalf of the
    /// beneficiary address `_beneficiary`.
    constructor(
        address payable _beneficiary
    ) public {
        beneficiary = _beneficiary;
    }
    
    /// Bid on the auction with the value sent
    /// together with this transation.
    /// The value will only be returned if the 
    /// auction is not won
    function bid(address payable sender) public payable {
        // If the bid is not higher, send the money back 
        require(
            msg.value > highestBid, 
            "There already is a higher bid."
        );
        
        // If auction has ended, send the mony back
        require(!ended, "auctionEnd has already been called.");
        
        if (highestBid != 0) {
            // Sending back the money by simply using
            // highestBidder.send(highestBid) is a security risk
            // because it could execute an un-trusted contract.
            // It is always safer to let the recipients
            // withdraw their money themselves.
            pendingReturns[highestBidder] += highestBid;
        }
        // Set the new values
        highestBidder = sender;
        highestBid = msg.value;
        emit HighestBidIncreased(sender, msg.value);
    }
    
    /// Withdraw a bid that was overbid. 
    function Withdraw() public returns (bool) {
        uint amount = pendingReturns[msg.sender];
          if (amount > 0) {
            // It is import to set this to zero because the recipients
            // can call this function again as part of the receiving call 
            // before 'send' returns;
            pendingReturns[msg.sender] = 0;
            
            if (!msg.sender.send(amount)) {
                // if sending the amont fails, reset 
                // No need to call throw here, just reset the amount owing
                pendingReturns[msg.sender] = amount;
                return false;
            }
          }
          return true;
    }
    
    function pendingReturn(address sender) public view returns (uint) {
        // Accept sender's address, and returns that 
        // senders corresponding pendingReturn amount
        return pendingReturns[sender];
    }
    
    /// End the auction and send the highest bid 
    /// to the beneficiary.
    function auctionEnd() public {
        // It is a good guideline to structure functions that interact
        // with other contracts (i.e. they call functions or send Ether)
        // into three phases:
        // 1. checking conditions
        // 2. performing actions (potentially changing conditions)
        // 3. interacting with other contracts
        // If these phases are mixed up, the other contract could call
        // back into the current contract and modify the state or cause
        // effects (ether payout) to be performed multiple times.
        // If functions called internally include interaction with external
        // contracts, they also have to be considered interaction with
        // external contracts.
        
        // 1. Conditions 
        require(!ended, "actionEnd has already been called.");
        require(msg.sender == beneficiary, "You are not the auction beneficiary");
        
        // 2. Effects
        ended = true;
        emit AuctionEnded(highestBidder, highestBid);
        
        // Interaction 
        beneficiary.transfer(highestBid);
    }
}